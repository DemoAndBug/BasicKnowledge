package com.simon.java.design.principles;

/**
 * 单一职责原则
 * desc:接口一定要做到单一职责， 类的设计尽量做到只有一个原因引起变化
 *
 * 单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。
 * 同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、低耦合。
 * 但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。
 *
 * 如何判断类的职责是否足够单一？
 * 类中的代码行数、函数或者属性过多；
 * 类依赖的其他类过多，或者依赖类的其他类过多；
 * 私有方法过多；
 * 比较难给类起一个合适的名字；
 * 类中大量的方法都是集中操作类中的某几个属性。
 */
public class Srp {
}
