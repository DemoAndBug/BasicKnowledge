package com.simon.java.design.principles;


/**
 * 开闭原则
 * desc:软件实体（模块、类、方法等）应该“对扩展开放、对修改关闭”
 *
 * 1. 如何理解“对扩展开放、对修改关闭”？
 * 添加一个新的功能，应该是通过在已有代码基础上扩展代码（新增模块、类、方法、属性等），而非修改已有代码（修改模块、类、方法、属性等）的方式来完成。
 * 关于定义，我们有两点要注意。
 * 第一点是，开闭原则并不是说完全杜绝修改，而是以最小的修改代码的代价来完成新功能的开发。
 * 第二点是，同样的代码改动，在粗代码粒度下，可能被认定为“修改”；在细代码粒度下，可能又被认定为“扩展”。
 *
 * 2. 如何做到“对扩展开放、修改关闭”？
 * 我们要时刻具备扩展意识、抽象意识、封装意识。在写代码的时候，我们要多花点时间思考一下，这段代码未来可能有哪些需求变更，
 * 如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，将新的代码灵活地插入到扩展点上。
 */
public class Ocp {
}
